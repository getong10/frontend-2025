/* Убираем стандартные стили */
body {
  margin: 0;
  font-family: sans-serif;
}

ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

a {
  text-decoration: none;
  color: inherit;
}

/* Стилизация шапки - наш FLEX-КОНТЕЙНЕР */
.main-header {
  display: flex; /* 1. Включаем Flexbox! */
  justify-content: space-between; /* 2. Расталкиваем дочерние элементы по краям */
  align-items: center; /* 3. Выравниваем их по центру по вертикали */
  
  padding: 15px 30px;
  background-color: #2c3e50;
  color: white;
}

.logo {
  font-size: 24px;
  font-weight: bold;
}

/* Навигация - это тоже FLEX-КОНТЕЙНЕР для ссылок! */
.main-nav ul {
  display: flex; /* Включаем Flexbox для элементов списка */
  gap: 20px; /* 4. Задаем красивый отступ между ссылками */
}

.main-nav a {
  padding: 5px;
  border-bottom: 2px solid transparent; /* Для эффекта при наведении */
  transition: border-color 0.3s;
}

.main-nav a:hover {
  border-color: #3498db;
}

/* Теория */

/* Для контейнера */
/* 1. display */
css.container {
  display: flex;        /* блочный flex-контейнер */
  display: inline-flex; /* строчный flex-контейнер */
}

/* 2. flex-direction */
/* Определяет направление главной оси: */
css.container {
  flex-direction: row;            /* по умолчанию, слева направо */
  flex-direction: row-reverse;    /* справа налево */
  flex-direction: column;         /* сверху вниз */
  flex-direction: column-reverse; /* снизу вверх */
}

/* 3. flex-wrap */
/* Управляет переносом элементов на новую строку: */
css.container {
  flex-wrap: nowrap;      /* по умолчанию, без переноса */
  flex-wrap: wrap;        /* перенос на следующую строку */
  flex-wrap: wrap-reverse; /* перенос с обратным порядком */
}

/* 4. flex-flow */
/* Сокращенное свойство для flex-direction и flex-wrap: */
css.container {
  flex-flow: row wrap;
  /* эквивалентно:
     flex-direction: row;
     flex-wrap: wrap; */
}

/* 5. justify-content */
/* Выравнивание по главной оси: */
css.container {
  justify-content: flex-start;    /* по умолчанию, к началу */
  justify-content: flex-end;      /* к концу */
  justify-content: center;        /* по центру */
  justify-content: space-between; /* равномерно, без отступов по краям */
  justify-content: space-around;  /* равномерно, с отступами по краям */
  justify-content: space-evenly;  /* равномерно, одинаковые отступы везде */
}

/* 6. align-items */
/* Выравнивание по поперечной оси: */
css.container {
  align-items: stretch;    /* по умолчанию, растягивание */
  align-items: flex-start; /* к началу поперечной оси */
  align-items: flex-end;   /* к концу поперечной оси */
  align-items: center;     /* по центру */
  align-items: baseline;   /* по базовой линии текста */
}

/* 7. align-content */
/* Выравнивание строк при многострочном layout: */
css.container {
  align-content: stretch;       /* по умолчанию */
  align-content: flex-start;    /* к началу */
  align-content: flex-end;      /* к концу */
  align-content: center;        /* по центру */
  align-content: space-between; /* равномерно */
  align-content: space-around;  /* с отступами */
  align-content: space-evenly;  /* одинаковые отступы */
}

/* 8. gap (row-gap, column-gap) */
/* Промежутки между элементами: */
css.container {
  gap: 20px;                    /* одинаковые отступы */
  gap: 20px 10px;              /* вертикальные и горизонтальные */
  row-gap: 20px;               /* только между строками */
  column-gap: 10px;            /* только между колонками */
}


/* Свойства Flex-элементов */

/* 1. flex-grow */
/* Определяет, как элемент будет расти относительно других: */
css.item {
  flex-grow: 0; /* по умолчанию, не растет */
  flex-grow: 1; /* занимает равную долю доступного пространства */
  flex-grow: 2; /* занимает в 2 раза больше пространства */
}

/* 2. flex-shrink */
/* Определяет, как элемент будет сжиматься при нехватке места: */
css.item {
  flex-shrink: 1; /* по умолчанию, может сжиматься */
  flex-shrink: 0; /* не сжимается */
  flex-shrink: 2; /* сжимается в 2 раза быстрее других */
}

/* 3. flex-basis */
/* Базовый размер элемента до распределения свободного пространства: */
css.item {
  flex-basis: auto;   /* по умолчанию, основано на содержимом */
  flex-basis: 200px;  /* фиксированный размер */
  flex-basis: 20%;    /* процентный размер */
  flex-basis: 0;      /* игнорирует содержимое при расчетах */
}

/* 4. flex */
/* Сокращенное свойство для flex-grow, flex-shrink и flex-basis: */
css.item {
  flex: 0 1 auto;  /* значения по умолчанию */
  flex: 1;         /* flex-grow: 1, flex-shrink: 1, flex-basis: 0 */
  flex: none;      /* flex: 0 0 auto (не гибкий) */
  flex: auto;      /* flex: 1 1 auto (полностью гибкий) */
}

/* 5. align-self */
/* Индивидуальное выравнивание элемента по поперечной оси: */
css.item {
  align-self: auto;       /* по умолчанию, наследует align-items */
  align-self: flex-start; /* к началу */
  align-self: flex-end;   /* к концу */
  align-self: center;     /* по центру */
  align-self: baseline;   /* по базовой линии */
  align-self: stretch;    /* растягивание */
}

/* 6. order */
/* Изменение порядка отображения элементов: */
css.item {
  order: 0;  /* по умолчанию */
  order: -1; /* будет первым */
  order: 1;  /* будет после элементов с order: 0 */
}

/* Практические паттерны Flexbox */
/* 1. Центрирование элемента */
css.center-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

/* 2. Равномерное распределение колонок */
css.equal-columns {
  display: flex;
}
.equal-columns > * {
  flex: 1;
}

/* 3. Sidebar layout */
css.layout {
  display: flex;
}
.sidebar {
  flex: 0 0 250px; /* фиксированная ширина */
}
.main-content {
  flex: 1; /* занимает оставшееся место */
}